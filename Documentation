# Ambassador iOS SDK

## Getting Started
***---------TODO--------***

* Download the framework file and copy it to your project directory.
* Add the framework under the 'Embedded Binaries' section under project settings.
  * You may need to remove a duplicate instance of the framework file under 'Linked Frameworks and Libraries.'  


***-------END TODO------***

## Initializing Ambassador

### Step 1
  In your `AppDelegate.m` import the Ambassador framework.

  **Objective-c**
  ```objective-c
  #import <iOS_Framework/iOS_Framework.h>
  ```

  **Swift**
  ```swift
  // TODO: swift stuff
  ```

### Step 2
You run Ambassador inside `application:didFinishLaunchingWithOptions:`
and have the option to convert on install. This will register a conversion
the first time the app is launched. More on conversions and setting their
parameters in [Conversions](). Your API key will be provided to you by Ambassador.

**Objective-c**
```objective-c
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
  // Override point for customization after application launch.

  // If you don't want to register a conversion during the first launch of your
  // application, then pass nil for the convertOnInstall parameter
  [Ambassador runWithKey:<your_API_key> convertOnInstall:nil];

  //--OR--

  // If you would like to register a conversion for one of your campaigns,
  // create a conversion object to pass for the convertOnInstall parameter
  ConversionParameters *parameters = [[ConversionParameters alloc] init];
  // ... set parameters' properties (more on this in the "Conversions" section)
  [Ambassador runWithKey:<your_API_key> convertOnInstall:parameters];
}
```

**Swift**
```swift
//TODO: swift stuff
```

## Identifying a User
In order to track referrals and provide users with custom share links,
Ambassador only needs the email address of the user. The call to identify
the user should be done early in the app to make sure all Ambassador services
 can be provided as soon as possible. We recommend putting it on a login screen
 or after the initial call to run Ambassador if you have the user's email stored.

 **Objective-c**
```objective-c
[Ambassador identifyWithEmail:@"user@example.com"];
```

**Swift**

```swift
//TODO: swift stuff
Ambassador.identifyWithEmail("user@example.com")
```

## Conversions
Conversions can be triggered from anywhere. Common places could be a view controller's ```viewDidLoad``` or on a button event.

**Objective-c**
```objective-c
// STEP ONE: Create a conversion parameters object
ConversionParameters *conversion = [[ConversionParameters alloc] init];

// STEP TWO: Set the required properties
conversion.mbsy_revenue = @10; // NSNumber
conversion.mbsy_campaign = @101; // NSNumber
conversion.mbsy_email = @"user@example.com"; // NSString

// STEP THREE: Set any optional properties
conversion.mbsy_add_to_group_id = @"123"; // NSString
conversion.mbsy_first_name = @"John"; // NSString
conversion.mbsy_last_name = @"Doe"; // NSString
conversion.mbsy_email_new_ambassador = @NO; // BOOL (Deafaults to @NO)
conversion.mbsy_uid = @"mbsy_uid"; // NSString
conversion.mbsy_custom1 = @"custom1"; // NSString
conversion.mbsy_custom2 = @"custom2"; // NSString
conversion.mbsy_custom3 = @"custom3"; // NSString
conversion.mbsy_auto_create = @YES; // BOOL (Defaults to @YES)
conversion.mbsy_deactivate_new_ambassador = @NO; // BOOL (Defaults to @NO)
conversion.mbsy_transaction_uid = @"trans_uid"; // NSString
conversion.mbsy_event_data1 = @"eventdata1"; // NSString
conversion.mbsy_event_data2 = @"eventdata2"; // NSString
conversion.mbsy_event_data3 = @"eventdata3"; // NSString
conversion.mbsy_is_approved = @YES; // BOOL (Defaults to @YES)

// STEP FOUR: Register the conversion with the parameter object
[Ambassador registerConversion:conversion];
```

**Swift**
```swift
//TODO: swift stuff
```

## Presenting the 'Refer A Friend' Screen (RAF)
### ShareService Preferences
The RAF screen provides a UI component that allows users to share with their contacts and become part of your referral program.
To allow customized messages, there is also a `ShareServicePreferences` object where you can set editable properties of the RAF.
If you leave any property unset, the RAF will use the default strings shown below.

<img src="screenShots/rafDemoImg.jpg" width="250" />   <img src="screenShots/contactShare.jpg" width="250"/>

The editable properties and their default strings are:
* `navBarTitle` - "Refer your friends"
* `titleLableText` - "Spread the word"
* `descriptionLabelText` - "Refer a friend to get rewards"
* `defaultShareMessage` - "I'm a fan of this company, check them out!"

### Presenting the RAF
**Objective-c**
```objective-c
// STEP ONE: Create a share service preferences object
ShareServicePreferences *preferences = [[ShareServicePreferences alloc] init];

// STEP TWO: (optional) Set the properties
preferences.navBarTitle = @"New navBar title"; // NSString
preferences.titleLabelText = @"New welcome title"; // NSString
preferences.descriptionLabelText = @"This is test description"; // NSString
preferences.defaultShareMessage = @"Share this test please!"; // NSString

// STEP THREE: Present the RAF Modal View
[Ambassador presentRAFForCampaign:@"877" FromViewController:self WithRAFParameters:rafParams];
```

**NOTES**

* **It is important that the view controller being passed is in the view hierarchy before the call is made. (If the RAF is going to be presented upon the launch of the view controller, but the method call in ```viewDidApprear:``` instead of ```viewDidLoad```)**

* **Identify should also be called before any calls to present a RAF. Identify will need to generate/update the short urls, and therefore should not be placed immediately before any RAF presentation calls.  This will allow the share urls to be generated for your user. If identify is not called before, or a campaign ID that does not exist is passed, a warning will be logged to let you know**
